<?php

/*
 * Implements hook_services_resources().
 */
function webform_service_services_resources() {

  // Include our resources.
  require_once("resources/webform_resource.inc");
  require_once("resources/submission_resource.inc");

  // Add the resources.
  $resources = array();
  $resources += _webform_resource_definition();
  $resources += _submission_resource_definition();
  return $resources;
}

/**
 * Determine whether the current user has access to a submission.
 */
function webform_service_submission_access($op = 'view', $args = array()) {

  // @todo: Fix the submission access...
  return TRUE;
}

/**
 * Determine whether the current user can access a node resource.
 *
 * @param $op
 *   One of view, update, create, delete per node_access().
 * @param $args
 *   Resource arguments passed through from the original request.
 * @param $load_node
 *   Function that loads the node.
 *
 * @return bool
 *
 * @see node_access()
 */
function webform_service_resource_access($op = 'view', $type = '', $args = array()) {
  $node = null;

  if (empty($args[0])) {
    return services_error(t('Must provide a uuid.'), 404);
  }
  else if (is_array($args[0]) || is_object($args[0])) {
    $node = (object)$args[0];
  }
  else if (in_array(gettype($args[0]), array('string', 'integer'))) {
    $node = webform_service_resource_load($args[0]);
  }

  if ($node) {

    // Return the node resource access.
    $node->type = $type;
    module_load_include('inc', 'services', 'resources/node_resource');
    return _node_resource_access($op, array($node));
  }
  else {

    // Return a 404.
    return services_error(t('Webform @uuid could not be found', array('@uuid' => $args[0])), 404);
  }
}

/**
 * Get the field value provided the entity and field name.
 *
 * @param type $entity
 * @param type $field_name
 * @param type $value_name
 * @return string
 */
function webform_service_field_value($entity, $field_name, $value_name = 'value') {
  $items = field_get_items('node', $entity, $field_name);
  if (isset($items[0])) {
    if (isset($items[0][$value_name])) {
      return $items[0][$value_name];
    }
    else {
      return $items[0];
    }
  }
  return '';
}

/**
 * Returns the data structure for webform components.
 */
function webform_service_get_components($webform) {
  $components = array();
  foreach ($webform['components'] as $component) {
    $components[] = array(
      'cid' => $component['cid'],
      'id' => $component['form_key'],
      'name' => $component['name'],
      'type' => $component['type'],
    );
  }
  return $components;
}

/**
 * Returns a data structure of a webform object.
 */
function webform_service_get_webform($entity) {
  $webform = array();
  if (isset($entity->webform)) {
    $webform = array(
      'components' => webform_service_get_components($entity->webform)
    );
  }
  return $webform;
}

/**
 * Returns a single media resource.
 *
 * @param $entity
 *   UUID or the whole object of the media we want to return.
 * @return
 *   Node object or FALSE if not found.
 *
 * @see node_load()
 */
function webform_service_get_resource($entity) {
  $resource = array();
  if (gettype($entity) === 'string') {
    $entity = webform_service_resource_load($entity);
  }
  if ($entity) {
    $uri = services_resource_uri(array('webform', $entity->uuid));
    $resource = (object)array(
      'uri' => services_resource_uri(array('webform', $entity->uuid)),
      'uuid' => $entity->uuid,
      'title' => $entity->title,
      'description' => webform_service_field_value($entity, 'body'),
      'created' => $entity->created,
      'updated' => $entity->changed,
      'submissions' => $uri . '/submissions',
      'webform' => webform_service_get_webform($entity),
    );
  }

  // Return the resource.
  return $resource;
}

/**
 * Returns a single submission resource.
 */
function webform_service_get_submission($webform, $submission) {

  // Get the webform entity.
  if (gettype($webform) === 'string') {
    $webform = webform_service_resource_load($webform);
  }

  // If the entity exists.
  if ($webform) {

    // Get the submission.
    module_load_include('inc', 'webform', 'includes/webform.submissions');

    // If the submission is an idex, then load it.
    if (is_int($submission)) {
      $submission = webform_get_submission($webform->nid, $submission);
    }

    // Make sure the submission exists.
    if ($submission) {

      // Get the components and establish the values.
      $components = webform_service_get_components($webform->webform);
      $values = array();
      foreach ($components as $component) {
        foreach ($submission->data[$component['cid']] as $index => $value) {
          $values[] = array(
            'id' => $component['id'],
            'value' => $submission->data[$component['cid']][$index],
            'index' => $index
          );
        }
      }

      // Load the user account.
      $account = user_load($submission->uid);

      // The return for this submission.
      $submission = array(
        'sid' => $submission->sid,
        'uri' => services_resource_uri(array('webform', $webform->uuid)) . '/' . $submission->sid,
        'webform' => services_resource_uri(array('webform', $webform->uuid)),
        'user' => $account->uuid,
        'submitted' => $submission->submitted,
        'data' => $values
      );
    }
  }
  return $submission;
}

/**
 * Retrieve all submissions for a webform.
 */
function webform_service_submission_index($uuid, $page, $page_size) {
  if ($webform = webform_service_resource_load($uuid)) {

    // Establish the index.
    $index = array();
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submissions = webform_get_submissions(array('nid' => $webform->nid));

    // Iterate through each submission and get the submission.
    foreach ($submissions as $submission) {
      $index[] = webform_service_get_submission($webform, $submission);
    }
    return $index;
  }
  else {

    // Return a 404.
    return services_error(t('@uuid could not be found', array('@uuid' => $uuid)), 404);
  }
}

/**
 * Return an array of optionally paged nids based on a set of criteria.
 *
 * @param array $params
 *   - $page (int) Page number of results to return (in pages of 20).
 *   - $search (string  A keyword being searched for.
 *   - $page_size (int) The number of items to be returned.
 * @param $function
 *   The function (as a string) called to get the index we want.
 * @param $query
 *   The entity field query.
 *
 * @return
 *   An array of node objects.
 */
function webform_service_resource_index($type, $result) {
  $items = array();
  if (!empty($result['node'])) {
    $entities = entity_load('node', array_keys($result['node']));
    foreach ($entities as $entity) {
      $item = webform_service_get_resource($entity);
      if ($item) {
        $items[] = $item;
      }
    }
  }
  return $items;
}

/**
 * Load a resource provided its uuid.  Much like node_load, but with uuid's...
 *
 * @param type $uuid
 * @return type
 */
function webform_service_resource_load($uuid) {
  $webforms = &drupal_static(__FUNCTION__);
  if (empty($webforms[$uuid])) {
    $webforms[$uuid] = reset(entity_uuid_load('node', array($uuid)));
  }
  return empty($webforms[$uuid]) ? NULL : $webforms[$uuid];
}

/**
 * The number of objects to return.
 *
 * @param int $page_size
 */
function webform_service_validate_parameters(&$page_size) {

  // Setting the default limit for the number of objects we would like to allow
  // to be returned on a single page.
  $default_pagesize = variable_get("services_node_index_page_size", 20);

  // If the user doesn't have access to make unlimited queries and the page size
  // request is over the default then reset the page size to the default limit.
  if (!user_access('perform unlimited index queries') && $page_size > $default_pagesize) {
    $page_size = $default_pagesize;
  }
}
